#include <iostream>
#include <vector>
#include <cmath>
#include <stdexcept>

//usado para verificar o total de operações realizados dentro de um dado loop.
static int totalOperacoes = 0;

int soma(int a, int b);
int loop(int n);
void exponentialFit(int n);

using namespace std;




/**
 * PURPOSE:
 *
 *  Polynomial Regression aims to fit a non-linear relationship to a set of
 *  points. It approximates this by solving a series of linear equations using
 *  a least-squares approach.
 *
 *  We can model the expected value y as an nth degree polynomial, yielding
 *  the general polynomial regression model:
 *
 *  y = a0 + a1 * x + a2 * x^2 + ... + an * x^n
 *
 * LICENSE:
 *
 * MIT License
 *
 * Copyright (c) 2020 Chris Engelsma
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @author Chris Engelsma
 */


template <class TYPE>
class PolynomialRegression {
public:

    PolynomialRegression();
    virtual ~PolynomialRegression() {};

    bool fitIt(
        const std::vector<TYPE>& x,
        const std::vector<TYPE>& y,
        const int& order,
        std::vector<TYPE>& coeffs);
};

template <class TYPE>
PolynomialRegression<TYPE>::PolynomialRegression() {};

template <class TYPE>
bool PolynomialRegression<TYPE>::fitIt(
    const std::vector<TYPE>& x,
    const std::vector<TYPE>& y,
    const int& order,
    std::vector<TYPE>& coeffs)
{
    // The size of xValues and yValues should be same
    if (x.size() != y.size()) {
        throw std::runtime_error("The size of x & y arrays are different");
        return false;
    }
    // The size of xValues and yValues cannot be 0, should not happen
    if (x.size() == 0 || y.size() == 0) {
        throw std::runtime_error("The size of x or y arrays is 0");
        return false;
    }

    int N = x.size();
    int n = order;
    int np1 = n + 1;
    int np2 = n + 2;
    int tnp1 = 2 * n + 1;
    TYPE tmp;

    // X = vector that stores values of sigma(xi^2n)
    std::vector<TYPE> X(tnp1);
    for (int i = 0; i < tnp1; ++i) {
        X[i] = 0;
        for (int j = 0; j < N; ++j)
            X[i] += (TYPE)pow(x[j], i);
    }

    // a = vector to store final coefficients.
    std::vector<TYPE> a(np1);

    // B = normal augmented matrix that stores the equations.
    std::vector<std::vector<TYPE> > B(np1, std::vector<TYPE>(np2, 0));

    for (int i = 0; i <= n; ++i)
        for (int j = 0; j <= n; ++j)
            B[i][j] = X[i + j];

    // Y = vector to store values of sigma(xi^n * yi)
    std::vector<TYPE> Y(np1);
    for (int i = 0; i < np1; ++i) {
        Y[i] = (TYPE)0;
        for (int j = 0; j < N; ++j) {
            Y[i] += (TYPE)pow(x[j], i) * y[j];
        }
    }

    // Load values of Y as last column of B
    for (int i = 0; i <= n; ++i)
        B[i][np1] = Y[i];

    n += 1;
    int nm1 = n - 1;

    // Pivotisation of the B matrix.
    for (int i = 0; i < n; ++i)
        for (int k = i + 1; k < n; ++k)
            if (B[i][i] < B[k][i])
                for (int j = 0; j <= n; ++j) {
                    tmp = B[i][j];
                    B[i][j] = B[k][j];
                    B[k][j] = tmp;
                }

    // Performs the Gaussian elimination.
    // (1) Make all elements below the pivot equals to zero
    //     or eliminate the variable.
    for (int i = 0; i < nm1; ++i)
        for (int k = i + 1; k < n; ++k) {
            TYPE t = B[k][i] / B[i][i];
            for (int j = 0; j <= n; ++j)
                B[k][j] -= t * B[i][j];         // (1)
        }

    // Back substitution.
    // (1) Set the variable as the rhs of last equation
    // (2) Subtract all lhs values except the target coefficient.
    // (3) Divide rhs by coefficient of variable being calculated.
    for (int i = nm1; i >= 0; --i) {
        a[i] = B[i][n];                   // (1)
        for (int j = 0; j < n; ++j)
            if (j != i)
                a[i] -= B[i][j] * a[j];       // (2)
        a[i] /= B[i][i];                  // (3)
    }

    coeffs.resize(a.size());
    
    for (size_t i = 0; i < a.size(); ++i) {
        coeffs[i] = a[i];
        
    }

    return true;
}


int main() {

    int n, order, i;

    printf(" C++ program for Polynomial and Exponential Curve fitting\n");
    printf("\nEnter the upper value for tests:");
    cin >> n;
    printf("\nEnter the expected n, as in O(n), order:");
    cin >> order;

    PolynomialRegression<long double> classSingleton;

    vector<long double> x;
    vector<long double> y;

    for ( i = 1; i < n; i++)
    {
        x.push_back(i);
        y.push_back(loop(i));
    }
    
    std::vector< long double> coeffs;

    //chamada do fit polinomial
    classSingleton.fitIt(x, y, order, coeffs);

    //n chamadas do fit exponencial
    for ( i = 1; i < n; i++)
    {
        exponentialFit(i);
    }
    

    //print dos resultados do fit polinomial
    auto ir = coeffs.begin();
    printf("\n\nPolynomial  fit: ");
    printf("\nT(x) = %.14lf .1", *ir);
  
    ++ir;

    for (i=1; ir != coeffs.end(); ++i, ir++) {
        cout << " + " << *ir << ".x^"<<i  ;
    }
    cout << endl << endl;

    cout << "If the coefficents appear as very small values you can ignore then." << endl;
    cout << "Check the proximity and Big O notation for the best fit" << endl;



}

int soma(int a, int b) {
    totalOperacoes++;
    return a + b;
}

int loop(int n) {
    totalOperacoes = 0;


    int temp = 0;

    for (int i = 0; i < n; i++)
    {
        for (int j = i; j < n; j++)
        {
            for (int k = i; k < n; k++)
            {
                temp = soma(temp, i);
                temp = soma(temp, j);
                temp = soma(temp, k);
            }
        }
    }

    //cout << "| n: " << n << "\t| total ops: " << totalOperacoes << endl;
    int ret = totalOperacoes;
    return ret;

}

void exponentialFit(int n) {
    double sumx = 0, sumy = 0, sumxy = 0, sumx2 = 0;

    double a, b, A;
    int i;
    double* Y = new double[n];
    double* x = new double[n];
    double* y = new double[n];


    x[0] = 1;
    for (i = 1; i <= n - 1; i++)
    {
        x[i] = i;

    }
    y[0] = 1;
    for (i = 1; i <= n - 1; i++)
    {
        y[i] = loop(i);
    }
    for (i = 0; i <= n - 1; i++)
    {
        Y[i] = log(y[i]);
    }

    for (i = 0; i <= n - 1; i++)
    {
        sumx = sumx + x[i];
        sumx2 = sumx2 + x[i] * x[i];
        sumy = sumy + Y[i];
        sumxy = sumxy + x[i] * Y[i];

    }
    A = ((sumx2 * sumy - sumx * sumxy) * 1.0 / (n * sumx2 - sumx * sumx) * 1.0);
    b = ((n * sumxy - sumx * sumy) * 1.0 / (n * sumx2 - sumx * sumx) * 1.0);
    a = exp(A);
    printf("\nExponential fit n was = %d\t| The curve is Y= %4.3fe^%4.3fX\n", n, a, b);

    delete[] x;
    delete[] y;
    delete[] Y;
}
